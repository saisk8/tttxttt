{"version":3,"sources":["utils.js","components/TicTacToe.js","Game.js","serviceWorker.js","index.js"],"names":["getWinner","cells","winPattern","a","b","c","some","cell","renderBoard","rows","columns","renderer","fillTTTsInGameRow","boardClassName","rowClassName","rowIdx","gameRow","colIdx","tttIndex","push","gameRows","flat","Cell","className","onClick","value","TicTacToe","renderCell","cellIdx","cellClasses","classNames","props","winner","x","o","d","highlight","mustPlaceIn","id","key","this","React","Component","Game","handleClick","cellIndex","state","totWinner","reducedBoard","game","newGameState","map","ttt","newReducedBoardState","newCurrentPlayer","xIsCurrent","newTotWinner","gameStatus","setState","renderTTT","Array","fill","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6ae5f72d.chunk.js","sourcesContent":["export const getWinner = cells => {\n\tconst winPatterns = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t];\n\tfor (const winPattern of winPatterns) {\n\t\tconst [a, b, c] = winPattern;\n\t\tif (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n\t\t\treturn cells[a];\n\t\t}\n\t}\n\tconst allCellsNotFilled = cells.some(cell => !cell);\n\treturn allCellsNotFilled ? null : 'D';\n};\n\nexport const renderBoard = (\n\t{ rows, columns },\n\t{ renderer, boardClassName, rowClassName }\n) => {\n\tconst fillTTTsInGameRow = (rowIdx, columns) => {\n\t\tconst gameRow = [];\n\t\tfor (let colIdx = 0; colIdx < columns; colIdx++) {\n\t\t\tconst tttIndex = rowIdx * columns + colIdx;\n\t\t\tgameRow.push(renderer(tttIndex));\n\t\t}\n\t\treturn gameRow;\n\t};\n\n\tconst gameRows = [];\n\tfor (let rowIdx = 0; rowIdx < rows; rowIdx++) {\n\t\tgameRows.push(fillTTTsInGameRow(rowIdx, columns));\n\t}\n\treturn gameRows.flat();\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { renderBoard } from '../utils';\n\nfunction Cell({ className, onClick, value }) {\n\treturn (\n\t\t<button className={className} onClick={onClick}>\n\t\t\t{value}\n\t\t</button>\n\t);\n}\n\nexport default class TicTacToe extends React.Component {\n\trenderCell = cellIdx => {\n\t\tconst cellClasses = classNames('cell', {\n\t\t\t'x-win': this.props.winner === 'X',\n\t\t\t'o-win': this.props.winner === 'O',\n\t\t\tx: !this.props.winner && this.props.cells[cellIdx] === 'X',\n\t\t\to: !this.props.winner && this.props.cells[cellIdx] === 'O',\n\t\t\td: this.props.winner === 'D',\n\t\t\thighlight:\n\t\t\t\t(this.props.mustPlaceIn === null && !this.props.cells[cellIdx]) ||\n\t\t\t\t(this.props.mustPlaceIn === this.props.id &&\n\t\t\t\t\t!this.props.cells[cellIdx]),\n\t\t});\n\t\treturn (\n\t\t\t<Cell\n\t\t\t\tkey={cellIdx}\n\t\t\t\tclassName={cellClasses}\n\t\t\t\tvalue={this.props.cells[cellIdx]}\n\t\t\t\tonClick={() => this.props.onClick(this.props.id, cellIdx)}\n\t\t\t/>\n\t\t);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='small-board'>\n\t\t\t\t{renderBoard(\n\t\t\t\t\t{ rows: 3, columns: 3 },\n\t\t\t\t\t{\n\t\t\t\t\t\trenderer: this.renderCell,\n\t\t\t\t\t\tboardClassName: 'game-board',\n\t\t\t\t\t\trowClassName: 'board-row',\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './assets/styles.css';\n\nimport TicTacToe from './components/TicTacToe';\nimport { getWinner, renderBoard } from './utils';\n\nexport default class Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgame: new Array(9).fill(new Array(9).fill(null)),\n\t\t\t// Reduced ttt x ttt (a.k.a. tot); in the form of a ttt\n\t\t\treducedBoard: new Array(9).fill(null),\n\t\t\txIsCurrent: true,\n\t\t\tmustPlaceIn: null,\n\t\t\ttotWinner: null,\n\t\t\tgameStatus: \"X's Turn\",\n\t\t};\n\t}\n\n\thandleClick = (tttIndex, cellIndex) => {\n\t\t// Do nothing if...\n\t\tif (\n\t\t\tthis.state.totWinner || // entire game is won\n\t\t\tthis.state.reducedBoard[tttIndex] || // tttIndex board is won\n\t\t\tthis.state.game[tttIndex][cellIndex] || // something is placed already in the cell\n\t\t\t(this.state.mustPlaceIn !== null && this.state.mustPlaceIn !== tttIndex) // invalid move\n\t\t)\n\t\t\treturn;\n\n\t\tconst newGameState = this.state.game.map(ttt => [...ttt]);\n\t\tconst newReducedBoardState = [...this.state.reducedBoard];\n\t\tconst newCurrentPlayer = this.state.xIsCurrent ? 'O' : 'X';\n\n\t\tnewGameState[tttIndex][cellIndex] = this.state.xIsCurrent ? 'X' : 'O';\n\t\tnewReducedBoardState[tttIndex] = getWinner(newGameState[tttIndex]);\n\t\tconst newTotWinner = getWinner(newReducedBoardState);\n\n\t\tlet gameStatus = `${newCurrentPlayer}'s Turn`;\n\t\tswitch (newTotWinner) {\n\t\t\tcase 'X':\n\t\t\tcase 'O':\n\t\t\t\tgameStatus = `${newTotWinner} wins`;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tgameStatus = \"It's a draw!\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tgame: newGameState,\n\t\t\ttotWinner: newTotWinner,\n\t\t\treducedBoard: newReducedBoardState,\n\t\t\txIsCurrent: !this.state.xIsCurrent,\n\t\t\tmustPlaceIn: newReducedBoardState[cellIndex] ? null : cellIndex,\n\t\t\tgameStatus,\n\t\t});\n\t};\n\n\trenderTTT = tttIndex => (\n\t\t<TicTacToe\n\t\t\tkey={tttIndex}\n\t\t\tid={tttIndex}\n\t\t\tonClick={this.handleClick}\n\t\t\tcells={this.state.game[tttIndex]}\n\t\t\tmustPlaceIn={this.state.mustPlaceIn}\n\t\t\txIsCurrent={this.state.xIsCurrent}\n\t\t\twinner={this.state.reducedBoard[tttIndex]}\n\t\t/>\n\t);\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='container full-height center-all'>\n\t\t\t\t<div className='game-wrapper'>\n\t\t\t\t\t<div className='game-info'>{this.state.gameStatus}</div>\n\t\t\t\t\t<div className='big-board'>\n\t\t\t\t\t\t{renderBoard(\n\t\t\t\t\t\t\t{ rows: 3, columns: 3 },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trenderer: this.renderTTT,\n\t\t\t\t\t\t\t\tboardClassName: 'main-game',\n\t\t\t\t\t\t\t\trowClassName: 'game-row',\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}